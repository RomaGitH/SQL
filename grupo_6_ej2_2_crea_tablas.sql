-----Creacion de tablas-----

-----------------------------------------------------------------------------
--------------------------------Esquema actor--------------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 1-------------------------------
-----------------------------------------------------------------------------

-----Tabla FUNCION-----

CREATE TABLE actor.FUNCION(
	ID INT2 NOT NULL,
	CODIGO_FUNCION INT2 NOT NULL,
	NOMBRE_FUNCION VARCHAR(60) NOT NULL,
	NOMBRE_FUNCION_RESUMIDO VARCHAR(20) NULL,
	CONSTRAINT pk_funcion PRIMARY KEY(ID),
	CONSTRAINT uk_funcion UNIQUE(CODIGO_FUNCION)
);

-----Tabla OCUPACION-----

CREATE TABLE actor.OCUPACION(
	ID INT2 NOT NULL,
	CODIGO_OCUPACION INT4 NOT NULL,
	NOMBRE_OCUPACION VARCHAR(60) NOT NULL,
	NOMBRE_OCUPACION_RESUMIDO VARCHAR(20) NOT NULL,
	CONSTRAINT pk_ocupacion PRIMARY KEY(ID),
	CONSTRAINT uk_ocupacion UNIQUE(CODIGO_OCUPACION)
);

-----Tabla PAIS-----


CREATE TABLE actor.PAIS(
	ID INT2 NOT NULL,
	CODIGO_PAIS VARCHAR(3) NOT NULL,
	NOMBRE_PAIS VARCHAR(60) NOT NULL,
	NOMBRE_PAIS_RESUMIDO VARCHAR(20) NOT NULL,
	GENTILICIO VARCHAR(255) NOT NULL,
	CONSTRAINT pk_pais PRIMARY KEY(ID),
	CONSTRAINT uk_pais UNIQUE(CODIGO_PAIS)
);

-----Tabla TIPO_PERSONA_JURIDICA-----

CREATE TABLE actor.TIPO_PERSONA_JURIDICA(
	ID INT2 NOT NULL,
	CODIGO_TIPO_PERSONA_JURIDICA INT2 NOT NULL,
	NOMBRE_TIPO_PERSONA_JURIDICA VARCHAR(60) NOT NULL,
	NOMBRE_TIPO_PERSONA_JURIDICA_RESUMIDO VARCHAR(20) NOT NULL,
	CONSTRAINT pk_tipo_persona_juridica PRIMARY KEY(ID),
	CONSTRAINT uk_tipo_persona_juridica UNIQUE(CODIGO_TIPO_PERSONA_JURIDICA)
);


-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 2-------------------------------
-----------------------------------------------------------------------------

-----Tabla PROVINCIA_ESTADO-----

CREATE TABLE actor.PROVINCIA_ESTADO(
	ID INT2 NOT NULL,
	ID_PAIS INT2 NOT NULL,
	CODIGO_PROVINCIA INT4 NOT NULL,
	NOMBRE_PROVINCIA VARCHAR(60) NOT NULL,
	NOMBRE_PROVINCIA_RESUMIDO VARCHAR(20) NOT NULL,
	CONSTRAINT pk_provincia PRIMARY KEY(ID),	
	CONSTRAINT uk_provincia UNIQUE(ID_PAIS, CODIGO_PROVINCIA),
	CONSTRAINT fk_provincia_estado_pais FOREIGN KEY(ID_PAIS)
		REFERENCES actor.PAIS(ID)
);

-----Tabla ACTOR-----

CREATE TABLE actor.ACTOR(
	ID INT2 NOT NULL,
	ID_PAIS INT2  NULL,
	CODIGO_ACTOR INT4 NOT NULL,
	CUIT_CODIGO1 INT2 NULL,
	CUIT_CODIGO2 INT4 NULL,
	CUIT_CODIGO3 INT2 NULL,
	EMAIL_PRINCIPAL VARCHAR(255) NULL,
	FECHA_ALTA DATE NOT NULL,
	FECHA_BAJA DATE NULL,
	TELEFONO_PRINCIPAL VARCHAR(255) NULL,
	CONSTRAINT pk_actor PRIMARY KEY(ID),	
	CONSTRAINT uk_actor UNIQUE(CODIGO_ACTOR),
	CONSTRAINT fk_actor_pais FOREIGN KEY(ID_PAIS)
		REFERENCES actor.PAIS(ID)
);

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 3-------------------------------
-----------------------------------------------------------------------------

-----Tabla DEPARTAMENTO-----

CREATE TABLE actor.DEPARTAMENTO(
	ID INT2 NOT NULL,
	ID_PROVINCIA_ESTADO INT2 NOT NULL,
	SECUENCIA INT2 NOT NULL,
	CODIGO_DEPARTAMENTO INT2 NOT NULL,
	NOMBRE_DEPARTAMENTO VARCHAR(60) NOT NULL,
	NOMBRE_DEPARTAMENTO_RESUMIDO VARCHAR(20) NOT NULL,
	CONSTRAINT pk_departamento PRIMARY KEY(ID),	
	CONSTRAINT uk_departamento UNIQUE(ID_PROVINCIA_ESTADO, SECUENCIA),
	CONSTRAINT fk_departamento_provincia_estado FOREIGN KEY(ID_PROVINCIA_ESTADO)
		REFERENCES actor.PROVINCIA_ESTADO(ID)
);

-----Tabla ORGANISMO-----

CREATE TABLE actor.ORGANISMO(
	ID INT2 NOT NULL,
	ID_ACTOR INT2 NOT NULL,
	NOMBRE_ORGANISMO VARCHAR(255) NOT NULL,
	SIGLA VARCHAR(60) NULL,
	CONSTRAINT pk_organismo PRIMARY KEY(ID),	
	CONSTRAINT uk_organismo UNIQUE(ID_ACTOR),
	CONSTRAINT fk_organismo_actor FOREIGN KEY(ID_ACTOR)
		REFERENCES actor.ACTOR(ID)
);

-----Tabla PERSONA_FISICA-----

CREATE TABLE actor.PERSONA_FISICA(
	ID INT2 NOT NULL,
	ID_ACTOR INT2 NOT NULL,
	ID_OCUPACION INT2 NULL,
	DOCUMENTO_IDENTIDAD_TIPO VARCHAR(1) NOT NULL,
	DOCUMENTO_IDENTIDAD_NUMERO INT4 NOT NULL,
	APELLIDO VARCHAR(255) NOT NULL,
	FECHA_NACIMIENTO DATE NOT NULL,
	NOMBRE VARCHAR(255) NOT NULL,
	MOVIL_PRINCIPAL VARCHAR(255) NULL,
	SEXO CHAR(1) NOT NULL,
	APELLIDO_MATERNO VARCHAR(255) NULL,
	FACTOR_SANGUINEO VARCHAR(255) NULL,
	GRUPO_SANGUINEO VARCHAR(255) NULL,
	DONANTE_ORGANOS VARCHAR(255) NULL,
	EMAIL_PERSONAL VARCHAR(255) NULL,
	ESTADO_CIVIL CHAR(1) NOT NULL,
	CONSTRAINT pk_persona_fisica PRIMARY KEY(ID),	
	CONSTRAINT uk_persona_fisica_1 UNIQUE(ID_ACTOR),
	CONSTRAINT uk_persona_fisica_2 UNIQUE(DOCUMENTO_IDENTIDAD_TIPO, DOCUMENTO_IDENTIDAD_NUMERO),
	CONSTRAINT fk_persona_fisica_actor FOREIGN KEY(ID_ACTOR)
		REFERENCES actor.ACTOR(ID),
	CONSTRAINT fk_persona_fisica_ocupacion FOREIGN KEY(ID_OCUPACION)
		REFERENCES actor.OCUPACION(ID),
	CONSTRAINT check_persona_fisica
	CHECK (ESTADO_CIVIL IN ('S', 'C', 'E', 'D', 'V', 'N'))
);

-----Tabla PERSONA_JURIDICA-----

CREATE TABLE actor.PERSONA_JURIDICA(
	ID INT2 NOT NULL,
	ID_ACTOR INT2 NOT NULL,
	ID_TIPO_PERSONA_JURIDICA INT2 NOT NULL,
	NOMBRE_FANTASIA VARCHAR(255) NULL,
	RAZON_SOCIAL VARCHAR(255) NOT NULL,
	CONSTRAINT pk_persona_juridica PRIMARY KEY(ID),	
	CONSTRAINT uk_persona_juridica UNIQUE(ID_ACTOR),
	CONSTRAINT fk_persona_juridica_actor FOREIGN KEY(ID_ACTOR)
		REFERENCES actor.ACTOR(ID),
	CONSTRAINT fk_persona_juridica_tipo_persona_juridica FOREIGN KEY(ID_TIPO_PERSONA_JURIDICA)
		REFERENCES actor.TIPO_PERSONA_JURIDICA(ID)
	);	


-----Tabla ROL-----

CREATE TABLE actor.ROL(
	ID INT2 NOT NULL,
	ID_ACTOR INT2 NOT NULL,
	TIPO_ROL VARCHAR(60) NOT NULL,
	CODIGO_ROL INT2 NOT NULL,
	CONSTRAINT pk_rol PRIMARY KEY(ID),	
	CONSTRAINT uk_rol_1 UNIQUE(ID_ACTOR),
	CONSTRAINT uk_rol_2 UNIQUE(TIPO_ROL, CODIGO_ROL),
	CONSTRAINT fk_rol_actor FOREIGN KEY(ID_ACTOR)
		REFERENCES actor.ACTOR(ID),
	CONSTRAINT check_rol
		CHECK (TIPO_ROL IN ('MEDICO', 'INSPECTOR_TRANSITO'))
	);	

-----Tabla USUARIO-----

CREATE TABLE actor.USUARIO(
	ID INT2 NOT NULL,
	ID_ACTOR INT2 NULL,
	ID_USUARIO VARCHAR(60) NOT NULL,
	APELLIDO_NOMBRE VARCHAR(255) NOT NULL,
	FECHA_ALTA DATE NOT NULL,
	HASH VARCHAR(255) NULL,
	TIME_HASH INT8 NULL,
	FECHA_BAJA DATE NULL,
	CONSTRAINT pk_usuario PRIMARY KEY(ID),	
	CONSTRAINT uk_usuario_1 UNIQUE(ID_ACTOR),
	CONSTRAINT uk_usuariol_2 UNIQUE(ID_USUARIO),
	CONSTRAINT fk_usuario_actor FOREIGN KEY(ID_ACTOR)
		REFERENCES actor.ACTOR(ID)
	);

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 4-------------------------------
-----------------------------------------------------------------------------

-----Tabla INTEGRA_ORGANISMO-----

CREATE TABLE actor.INTEGRA_ORGANISMO(
	ID INT2 NOT NULL,
	ID_PERSONA_FISICA INT2 NOT NULL,
	ID_ORGANISMO INT2 NOT NULL,
	ID_FUNCION INT2 NOT NULL,
	SECUENCIA INT2 NOT NULL,
	FECHA_ALTA DATE NOT NULL,
	FECHA_BAJA DATE NULL,
	CONSTRAINT pk_integra_organismo PRIMARY KEY(ID),	
	CONSTRAINT uk_integra_organismo UNIQUE(ID_ORGANISMO, SECUENCIA),
	CONSTRAINT fk_integra_organismo_persona_fisica FOREIGN KEY(ID_PERSONA_FISICA)
		REFERENCES actor.PERSONA_FISICA(ID),
	CONSTRAINT fk_integra_organismo_organismo FOREIGN KEY(ID_ORGANISMO)
		REFERENCES actor.ORGANISMO(ID),
	CONSTRAINT fk_integra_organismo_funcion FOREIGN KEY(ID_FUNCION)
		REFERENCES actor.FUNCION(ID)
);

-----Tabla INTEGRA_PERSONA_JURIDICA-----

CREATE TABLE actor.INTEGRA_PERSONA_JURIDICA(
	ID INT2 NOT NULL,
	ID_PERSONA_JURIDICA INT2 NOT NULL,
	ID_PERSONA_FISICA INT2 NOT NULL,
	ID_FUNCION INT2 NOT NULL,
	SECUENCIA INT2 NOT NULL,
	FECHA_ALTA DATE NOT NULL,
	FECHA_BAJA DATE NULL,
	CONSTRAINT pk_integra_persona_juridica PRIMARY KEY(ID),	
	CONSTRAINT uk_integra_persona_juridica UNIQUE(ID_PERSONA_JURIDICA, SECUENCIA),
	CONSTRAINT fk_integra_persona_juridica_persona_juridica FOREIGN KEY(ID_PERSONA_JURIDICA)
		REFERENCES actor.PERSONA_JURIDICA(ID),
	CONSTRAINT fk_integra_persona_juridica_persona_fisica FOREIGN KEY(ID_PERSONA_FISICA)
		REFERENCES actor.PERSONA_FISICA(ID),
	CONSTRAINT fk_integra_persona_juridica_funcion FOREIGN KEY(ID_FUNCION)
		REFERENCES actor.FUNCION(ID)
);

-----Tabla LOCALIDAD-----

CREATE TABLE actor.LOCALIDAD(
	ID INT2 NOT NULL,
	ID_DEPARTAMENTO INT2 NULL,
	ID_PROVINCIA_ESTADO INT2 NULL,
	CODIGO_LOCALIDAD INT4 NOT NULL,
	NOMBRE_LOCALIDAD VARCHAR(60) NOT NULL,
	NOMBRE_LOCALIDAD_RESUMIDO VARCHAR(20) NOT NULL,
	CODIGO_POSTAL INT2 NULL,
	CONSTRAINT pk_localidad PRIMARY KEY(ID),	
	CONSTRAINT uk_localidad UNIQUE(CODIGO_LOCALIDAD),
	CONSTRAINT fk_localidad_departamento FOREIGN KEY(ID_DEPARTAMENTO)
		REFERENCES actor.DEPARTAMENTO(ID),
	CONSTRAINT fk_localidad_provincia_estado FOREIGN KEY(ID_PROVINCIA_ESTADO)
		REFERENCES actor.PROVINCIA_ESTADO(ID)
);

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 5-------------------------------
-----------------------------------------------------------------------------

-----Tabla DIRECCION_ACTOR-----

CREATE TABLE actor.DIRECCION_ACTOR(
	ID INT2 NOT NULL,
	ID_ACTOR INT2 NOT NULL,
	ID_LOCALIDAD INT2 NULL,
	SECUENCIA INT2 NOT NULL,
	DOMICILIO VARCHAR(255) NULL,
	CALLE VARCHAR(255) NULL,
	DEPARTAMENTO VARCHAR(255) NULL,
	NUMERO_PORTAL INT4 NULL,
	PISO VARCHAR(255) NULL,
	EDIFICIO VARCHAR(255) NULL,	
	MANZANA VARCHAR(255) NULL,
	MONOBLOCK VARCHAR(255) NULL,
	TORRE VARCHAR(255) NULL,
	VIVIENDA VARCHAR(255) NULL,
	TIPO_DOMICILIO VARCHAR(20) NULL,
	CONSTRAINT pk_direccion_actor PRIMARY KEY(ID),
	CONSTRAINT uk_direccion_actor UNIQUE(ID_ACTOR, SECUENCIA),
	CONSTRAINT fk_direccion_actor_actor FOREIGN KEY(ID_ACTOR)
		REFERENCES actor.ACTOR(ID),
	CONSTRAINT fk_direccon_actor_localidad FOREIGN KEY(ID_LOCALIDAD)
		REFERENCES actor.LOCALIDAD(ID),
	CONSTRAINT check_direccion_actor
		CHECK (TIPO_DOMICILIO IN('SUCURSAL', 'LABORAL', 'CASA_CENTRAL', 'FISCAL', 'OTRO', 'PARTICULAR'))
);

-----------------------------------------------------------------------------
----------------------------Esquema solicitud--------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 1-------------------------------
-----------------------------------------------------------------------------

-----Tabla CLASE_LICENCIA_CONDUCIR-----

CREATE TABLE solicitud.CLASE_LICENCIA_CONDUCIR(
	ID INT2 NOT NULL,
	CLASE VARCHAR(10) NOT NULL,
	DESCRIPCION_CLASE VARCHAR(255) NULL,
	EDAD_MAXIMA INT2 NULL,
	EDAD_MINIMA INT2 NOT NULL,
	FECHA_BAJA DATE NULL,
	OBSERVACIONES VARCHAR(255) NULL,
	REQUIERE_EXAMEN_PSIQUIATRICO BOOL NOT NULL,
	ES_PROFESIONAL BOOL NOT NULL,
	CONSTRAINT pk_clase_licencia_conducir PRIMARY KEY(ID),
	CONSTRAINT uk_clase_licencia_conducir UNIQUE(CLASE)
);

-----Tabla CONCEPTO_MEDICO-----

CREATE TABLE solicitud.CONCEPTO_MEDICO(
	ID INT2 NOT NULL,
	CODIGO_CONCEPTO_MEDICO INT2 NOT NULL,
	NOMBRE_CONCEPTO VARCHAR(60) NOT NULL,
	CONSTRAINT pk_concepto_medico PRIMARY KEY(ID),
	CONSTRAINT uk_codigo_concepto_medico UNIQUE(CODIGO_CONCEPTO_MEDICO)
);

-----Tabla MOTIVO_RECHAZO-----

CREATE TABLE solicitud.MOTIVO_RECHAZO(
	ID INT2 NOT NULL,
	CODIGO_MOTIVO_RECHAZO INT2 NOT NULL,
	DESCRIPCION_MOTIVO_RECHAZO VARCHAR(120) NOT NULL,
	CONSTRAINT pk_motivo_rechazo PRIMARY KEY(ID),
	CONSTRAINT uk_motivo_rechazo UNIQUE(CODIGO_MOTIVO_RECHAZO)
);

-----Tabla SUBTRIBUTO-----

CREATE TABLE solicitud.SUBTRIBUTO(
	ID INT2 NOT NULL,
	CODIGO_SUBTRIBUTO INT2 NOT NULL,
	NOMBRE_SUBTRIBUTO VARCHAR(120) NOT NULL,
	CONSTRAINT pk_subtributo PRIMARY KEY(ID),
	CONSTRAINT uk_subtributo UNIQUE(CODIGO_SUBTRIBUTO)
);

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 2-------------------------------
-----------------------------------------------------------------------------

-----Tabla CLASE_LICENCIA_CONDUCIR_REQUERIDA-----

CREATE TABLE solicitud.CLASE_LICENCIA_CONDUCIR_REQUERIDA(
	ID INT2 NOT NULL,
	ID_CLASE_LICENCIA INT2 NOT NULL,
	ID_CLASE_LICENCIA_DEPENDIENTE INT2 NOT NULL,
	SECUENCIA INT2 NOT NULL,
	TENENCIA_MINIMA INT2 NOT NULL,
	CONSTRAINT pk_clase_licencia_conducir_requerida PRIMARY KEY(ID),
	CONSTRAINT uk_clase_licencia_conducir_reuquerida UNIQUE(ID_CLASE_LICENCIA, SECUENCIA),
	CONSTRAINT fk_clase_licencia FOREIGN KEY(ID_CLASE_LICENCIA)
		REFERENCES solicitud.CLASE_LICENCIA_CONDUCIR(ID),
	CONSTRAINT fk_clase_licencia_dependiente FOREIGN KEY(ID_CLASE_LICENCIA_DEPENDIENTE)
		REFERENCES solicitud.CLASE_LICENCIA_CONDUCIR(ID)
);

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 5-------------------------------
-----------------------------------------------------------------------------

-----Tabla SOLICITUD_LICENCIA_CONDUCTOR-----
CREATE TABLE solicitud.SOLICITUD_LICENCIA_CONDUCTOR(
	ID INT2 NOT NULL,
	ID_PERSONA_FISICA INT2 NOT NULL,
	ID_LOCALIDAD INT2 NULL,
	ID_USUARIO INT2 NOT NULL,
	ID_ESTADO INT2 NULL,
	ID_MOTIVO_RECHAZO INT NULL,
	NUMERO INT4 NOT NULL,
	DOMICILIO VARCHAR(255) NOT NULL,
	FECHA DATE NOT NULL,
	LIBRE_MULTA BOOL NOT NULL,
	CORRESPONDE_CHARLA VARCHAR(60) NOT NULL,
	CORRESPONDE_PSIQUIATRICO VARCHAR(60) NOT NULL,
	CORRESPONDE_TEORICO VARCHAR(60) NOT NULL,
	CORRESPONDE_FISICO VARCHAR(60) NOT NULL,
	TIPO VARCHAR(60) NOT NULL,
	CALLE VARCHAR(255) NOT NULL,
	DEPARTAMENTO VARCHAR(255) NOT NULL,
	NUMERO_PORTAL VARCHAR(255) NOT NULL,
	PISO VARCHAR(255) NOT NULL,
	FECHA_VENCIMIENTO DATE NULL,
	CONSTRAINT pk_solicitud_licencia_conductor PRIMARY KEY(ID),
	CONSTRAINT uk_solicitud_licencia_conductor UNIQUE(NUMERO),
	CONSTRAINT fk_solicitud_licencia_conductor_persona_fisica FOREIGN KEY(ID_PERSONA_FISICA)
		REFERENCES actor.PERSONA_FISICA(ID),
	CONSTRAINT fk_solicitud_licencia_conductor_localidad FOREIGN KEY(ID_LOCALIDAD)
		REFERENCES actor.LOCALIDAD(ID),
	CONSTRAINT fk_solicitud_licencia_conductor_usuario FOREIGN KEY(ID_USUARIO)
		REFERENCES actor.USUARIO(ID),
	CONSTRAINT fk_solicitud_licencia_conductor_motivo_rechazo FOREIGN KEY(ID_MOTIVO_RECHAZO)
		REFERENCES solicitud.MOTIVO_RECHAZO(ID),
	CONSTRAINT chec_solicitud_licencia_conductor
		CHECK (TIPO IN ('PROFESIONAL', 'COMUN'))
);


-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 6-------------------------------
-----------------------------------------------------------------------------

-----Tabla ESTADO_SOLICITUD_LICENCIA_CONDUCTOR-----

CREATE TABLE solicitud.ESTADO_SOLICITUD_LICENCIA_CONDUCTOR (
	ID INT2 NOT NULL,
	ID_SOLICITUD_LICENCIA_CONDUCTOR INT2 NOT NULL,
	ITEM INT2 NOT NULL,
	TIPO VARCHAR(60) NOT NULL,
	FECHA DATE NOT NULL,
	CONSTRAINT pk_estado_solicitud_licencia_conductor PRIMARY KEY(ID),
	CONSTRAINT uk_estado_solicitud_licencia_conductor UNIQUE(ID_SOLICITUD_LICENCIA_CONDUCTOR, ITEM),
	CONSTRAINT fk_estado_solicitud_licencia_conductor FOREIGN KEY(ID_SOLICITUD_LICENCIA_CONDUCTOR)
		REFERENCES solicitud.SOLICITUD_LICENCIA_CONDUCTOR(ID),
	CONSTRAINT check_estado_solicitud_licencia_conductor
		CHECK (TIPO IN ('EXAMEN_PSIQUIATRICO_NO_APTO',
						'EXAMEN_PRACTICO_APROBADO',
						'PRESENTADA',
						'EXAMEN_PRACTICO_PARCIALMENTE_APROBADO',
						'APROBADA_SIMUCO',
						'EXAMEN_PSICO_FISICO_INTERCONSULTA',
						'EXAMEN_PRACTICO_REPROBADO_N_VECES',
						'RECHAZADA',
						'EXAMEN_PSIQUIATRICO_APTO_PRACTICO_N_VECES',
						'EXAMEN_PSICO_FISICO_NO_APTO_TEMPORARIO',
						'EXAMEN_PRACTICO_REPROBADO',
						'EXAMEN_PSIQUIATRICO_APTO_TEORICO_N_VECES',
						'EXAMEN_PSICO_FISICO_NO_APTO',
						'EXAMEN_PSICO_FISICO_APTO_CON_RESTRICCIONES',
						'EXAMEN_PSICO_FISICO_APTO',
						'APROBADA',
						'EXAMEN_PSIQUIATRICO_APTO',
						'EXAMEN_TEORICO_APROBADO',
						'PARCIALMENTE_APROBADA',
						'EXAMEN_TEORICO_REPROBADO'))
);

-----MODIFICACION SOLICITUD_LICENCIA_CONDUCTOR-----
ALTER TABLE solicitud.SOLICITUD_LICENCIA_CONDUCTOR
	ADD CONSTRAINT fk_estado FOREIGN KEY(ID_ESTADO)
		REFERENCES solicitud.ESTADO_SOLICITUD_LICENCIA_CONDUCTOR(ID);


-----Tabla LIQUIDACION_SOLICITUD_LICENCIA_CONDUCTOR-----

CREATE TABLE solicitud.LIQUIDACION_SOLICITUD_LICENCIA_CONDUCTOR (
	ID INT2 NOT NULL,
	ID_SOLICITUD_LICENCIA_CONDUCTOR INT2 NOT NULL,
	ID_USUARIO INT2 NULL,
	NUMERO INT4 NOT NULL,
	FECHA DATE NOT NULL,
	FECHA_PAGO DATE NULL,
	FECHA_VENCIMIENTO DATE NOT NULL,
	IMPORTE_TOTAL NUMERIC(19,2) NOT NULL,
	PAGADA BOOL NOT NULL,
	TIPO VARCHAR(60) NOT NULL,
	TIPO_PAGO VARCHAR(60) NOT NULL,
	CONSTRAINT pk_liquidacion_solicitud_licencia_conductor PRIMARY KEY(ID),
	CONSTRAINT uk_liquidacion_solicitud_licencia_conductor UNIQUE(NUMERO),
	CONSTRAINT fk_liqudidacion_solicitud_licencia_conductor FOREIGN KEY(ID_SOLICITUD_LICENCIA_CONDUCTOR)
		REFERENCES solicitud.SOLICITUD_LICENCIA_CONDUCTOR(ID),
	CONSTRAINT fk_liqudidacion_usuario FOREIGN KEY(ID_USUARIO)
		REFERENCES actor.USUARIO(ID),
	CONSTRAINT check_liquidacion_tipo 
		CHECK (TIPO IN ('MEDICO_VENCIMIENTO',
						'MEDICO_COMUN',
						'MEDICO_JUNTA',
						'TASA_ACTUACION_ADMINISTRATIVA_DUPLICADO',
						'TASA_ACTUACION_ADMINISTRATIVA_DIFERENCIAL',
						'TASA_ACTUACION_ADMINISTRATIVA')),
	CONSTRAINT check_liquidacion_tipo_pago
		CHECK (TIPO_PAGO IN ('NO_INFORMADO', 'USUARIO', 'COMUN'))
);


-----Tabla SOLICITUD_LICENCIA_CONDUCIR_CLASE-----

CREATE TABLE solicitud.SOLICITUD_LICENCIA_CONDUCIR_CLASE(
	ID INT2 NOT NULL,
	ID_SOLICITUD_LICENCIA_CONDUCTOR INT2 NOT NULL,
	ID_MOTIVO_RECHAZO INT2 NULL,
	ID_CLASE_LICENCIA INT2 NOT NULL,
	SECUENCIA INT2 NOT NULL,
	FECHA_RECHAZO DATE NULL,
	TIPO_GESTION VARCHAR(60) NOT NULL,
	FECHA_IMPRESION DATE NULL,
	FECHA_VALIDACION_FINAL DATE NULL,
	FECHA_ENTREGA DATE NULL,
	CORRESPONDE_CHARLA VARCHAR(60) NOT NULL,
	CORRESPONDE_FISICO VARCHAR(60) NOT NULL,
	CORRESPONDE_PSIQUIATRICO VARCHAR(60) NOT NULL,
	FECHA_PRACTICO DATE NULL,
	RESULTADO_PRACTICO VARCHAR(60) NOT NULL,
	CONSTRAINT pk_solicitud_licencia_conductor_clase PRIMARY KEY(ID),
	CONSTRAINT uk_solicitud_licencia_conductor_clase UNIQUE(ID_SOLICITUD_LICENCIA_CONDUCTOR, SECUENCIA),
	CONSTRAINT fk_solicitud_licencia_conductor_clase FOREIGN KEY(ID_SOLICITUD_LICENCIA_CONDUCTOR)
		REFERENCES solicitud.SOLICITUD_LICENCIA_CONDUCTOR(ID),
	CONSTRAINT fk_motivo_rechazo FOREIGN KEY(ID_MOTIVO_RECHAZO)
		REFERENCES solicitud.MOTIVO_RECHAZO(ID),
	CONSTRAINT fk_clase_licencia FOREIGN KEY(ID_CLASE_LICENCIA)
		REFERENCES solicitud.CLASE_LICENCIA_CONDUCIR(ID),
	CONSTRAINT check_solicitud_licencia_conductor_tipo_gestion
		CHECK (TIPO_GESTION IN ('REVALIDA_ANUAL',
						'EXTRAVIO',
						'RENOVACION',
						'AMPLIACION',
						'NUEVO',
						'PROVINCIAL_A_NACIONAL',
						'CAMBIO_DATOS'))
);

-----------------------------------------------------------------------------
--------------------------------Tablas Nivel 7-------------------------------
-----------------------------------------------------------------------------

-----Tabla DETALLE_LIQUIDACION_SOLICITUD_LICENCIA_CONDUCTOR-----

CREATE TABLE solicitud.DETALLE_LIQUIDACION_SOLICITUD_LICENCIA_CONDUCTOR(
	ID INT2 NOT NULL,
	ID_LIQUIDACION INT2 NOT NULL,
	ID_SUBTRIBUTO INT2 NULL,
	ID_CONCEPTO_MEDICO INT2 NULL,
	SECUENCIA INT2 NOT NULL,
	CANTIDAD INT2 NOT NULL,
	IMPORTE NUMERIC(19,2) NOT NULL,
	CONSTRAINT pk_detalle_liquidacion_solicitud_licencia_conductor PRIMARY KEY(ID),
	CONSTRAINT uk_detalle_liquidacion_solicitud_licencia_conductor UNIQUE(ID_LIQUIDACION, SECUENCIA),
	CONSTRAINT fk_detalle_liquidacion_solicitud_licencia_conductor FOREIGN KEY(ID_LIQUIDACION)
		REFERENCES solicitud.LIQUIDACION_SOLICITUD_LICENCIA_CONDUCTOR(ID),
	CONSTRAINT fk_detalle_subtributo FOREIGN KEY(ID_SUBTRIBUTO)
		REFERENCES solicitud.SUBTRIBUTO(ID),
	CONSTRAINT fk_detalle_concepto_medico FOREIGN KEY(ID_CONCEPTO_MEDICO)
		REFERENCES solicitud.CONCEPTO_MEDICO(ID)
	);




